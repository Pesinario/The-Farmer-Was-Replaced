from pathlib import Path
# This script parses the output.txt file generated by the game and gives color
# coding, sorry if it's ugly, it was only meant for my own personal use but
# figured i may as well add it to the repo. Since then i made a more powerful
# script, that deals with the "output.txt" file in a smarter way, look for
# tfwr_watcher in the repository.


def give_color_code(indicator):
    octal = "\033"
    if indicator == "$":
        return octal + "[32m" + "BUD:"
    elif indicator == "Â°":
        return octal + "[31m" + "ERR:"
    elif indicator == "+":
        return octal + "[33m" + "GND:"
    elif indicator == "-":
        return octal + "[34m" + "INF:"
    elif indicator == "~":
        return octal + "[35m" + "MLS:"
    else:
        return "*"


def color_this_line(line):
    end = "\033[0m"
    return give_color_code(line[0]) + line[1:] + end


# You may need to modify this bit of code to get it working, the code assumes
# you cloned the repo as a save inside the game itself.
my_path = Path(__file__).parents[3]  # Get the path to the "main" game folder
my_path = my_path / 'output.txt'    # Get to the output file

with open(my_path, encoding='utf-8') as file:
    raw_output = file.read()

output_lines = raw_output.splitlines()

colored_lines = []
for output_line in output_lines:
    colored_lines.append(color_this_line(output_line))


def trim_output(output_untrimmed: list, default_include=True,
                include_grind=None, include_budget=None,
                include_error=None, include_info=None, include_milestone=None):

    if include_grind == None:
        include_grind = default_include

    if include_budget == None:
        include_budget = default_include

    if include_error == None:
        include_error = default_include

    if include_info == None:
        include_info = default_include

    if include_milestone == None:
        include_milestone = default_include

    trimmed_output = []
    for line in output_untrimmed:
        if "GND:" in line and include_grind:
            trimmed_output.append(line)
        elif "BUD:" in line and include_budget:
            trimmed_output.append(line)
        elif "ERR:" in line and include_error:
            trimmed_output.append(line)
        elif "INF:" in line and include_info:
            trimmed_output.append(line)
        elif "MLS:" in line and include_milestone:
            trimmed_output.append(line)

    return trimmed_output


trimmed_lines = trim_output(colored_lines, default_include=False,
                            include_error=True, include_info=True)

# This is here because depending on which terminal you use,
# it will truncate at different line amounts.
print("If you're reading this, the terminal is showing all of the logs.")

for trimmed_line in trimmed_lines:
    print(trimmed_line)

print(f"Length of total lines: {len(colored_lines)}")  # oh my beloved fStrings
print(f"Length of trimmed lines: {len(trimmed_lines)}")  # I missed you.
